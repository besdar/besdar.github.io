{"mappings":"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","sources":["<anon>","src/scripts/snow/index.ts"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  var parcelRequire = $parcel$global[\"parcelRequire94c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"aLNlP\", function(module, exports) {\n\n$parcel$export(module.exports, \"initSnow\", () => $37dd629e9bb0ec99$export$91f81f316470c81f);\n\nfunction $37dd629e9bb0ec99$var$debounce(func, wait = 1000) {\n    let timeout;\n    return ()=>{\n        clearTimeout(timeout);\n        timeout = setTimeout(func, wait);\n    };\n}\nfunction $37dd629e9bb0ec99$var$getRandomInt(min = 0, max = 1) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\nclass $37dd629e9bb0ec99$var$Snowfall {\n    constructor(canvas){\n        this.snowCounter = 0;\n        this.speedMultiplier = 0;\n        this.snowflakes = [];\n        this.animationFrameId = 0;\n        this.canvas = canvas;\n        const context = canvas.getContext(\"2d\");\n        if (!context) throw new Error(\"Failed to get 2D context\");\n        this.context = context;\n        this.resize();\n    }\n    #createSnowflake() {\n        const radius = $37dd629e9bb0ec99$var$getRandomInt(1, 8);\n        return {\n            xpos: $37dd629e9bb0ec99$var$getRandomInt(0, this.canvas.width),\n            ypos: $37dd629e9bb0ec99$var$getRandomInt(-this.canvas.height, 0),\n            radius: radius,\n            opacity: radius * 10,\n            speed: this.speedMultiplier * (radius / 6),\n            dx: (Math.random() - 0.5) * 2\n        };\n    }\n    #drawSnowflake(flake) {\n        this.context.beginPath();\n        this.context.arc(flake.xpos, flake.ypos, flake.radius, 0, Math.PI * 2);\n        this.context.fillStyle = `hsl(202.33deg 53.09% 84.12% / ${flake.opacity}%)`;\n        this.context.fill();\n    }\n    #updateSnowflake(flake) {\n        flake.xpos += flake.dx;\n        flake.ypos += flake.speed;\n        if (flake.ypos - flake.radius > this.canvas.height) {\n            flake.ypos = $37dd629e9bb0ec99$var$getRandomInt(-this.canvas.height, 0);\n            flake.xpos = $37dd629e9bb0ec99$var$getRandomInt(0, this.canvas.width);\n        }\n    }\n    start() {\n        this.snowCounter = 100;\n        this.speedMultiplier = 1;\n        this.stop();\n        this.snowflakes = Array.from({\n            length: this.snowCounter\n        }, ()=>this.#createSnowflake());\n        this.#animate();\n    }\n    #animate() {\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        this.snowflakes.forEach((flake)=>{\n            this.#updateSnowflake(flake);\n            this.#drawSnowflake(flake);\n        });\n        this.animationFrameId = requestAnimationFrame(this.#animate.bind(this));\n    }\n    stop() {\n        if (this.animationFrameId) {\n            cancelAnimationFrame(this.animationFrameId);\n            this.animationFrameId = 0;\n        }\n        this.snowflakes = [];\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n    setCounter(newCount) {\n        this.snowCounter = newCount;\n        this.snowflakes = Array.from({\n            length: this.snowCounter\n        }, ()=>this.#createSnowflake());\n    }\n    resize() {\n        this.canvas.width = window.innerWidth;\n        this.canvas.height = window.innerHeight;\n    }\n}\nfunction $37dd629e9bb0ec99$export$91f81f316470c81f() {\n    const canvas = document.getElementById(\"snow-canvas\");\n    const snowfall = new $37dd629e9bb0ec99$var$Snowfall(canvas);\n    snowfall.start();\n    window.addEventListener(\"resize\", $37dd629e9bb0ec99$var$debounce(()=>snowfall.resize(), 150));\n}\n\n});\n\n\n//# sourceMappingURL=snow.fdcfdfbc.js.map\n","import \"./index.css\";\n\nfunction debounce(func: () => void, wait = 1000) {\n    let timeout: NodeJS.Timeout | undefined;\n\n    return () => {\n        clearTimeout(timeout);\n        timeout = setTimeout(func, wait);\n    };\n}\n\nfunction getRandomInt(min = 0, max = 1) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\n\ntype SnowFlake = {\n    xpos: number;\n    ypos: number;\n    radius: number;\n    opacity: number;\n    speed: number;\n    dx: number;\n};\n\nclass Snowfall {\n    canvas: HTMLCanvasElement;\n    context: CanvasRenderingContext2D;\n    snowCounter = 0;\n    speedMultiplier = 0;\n    snowflakes: SnowFlake[] = [];\n    animationFrameId: number = 0;\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.canvas = canvas;\n        const context = canvas.getContext(\"2d\");\n\n        if (!context) {\n            throw new Error(\"Failed to get 2D context\");\n        }\n\n        this.context = context;\n\n        this.resize();\n    }\n\n    #createSnowflake(): SnowFlake {\n        const radius = getRandomInt(1, 8);\n\n        return {\n            xpos: getRandomInt(0, this.canvas.width),\n            ypos: getRandomInt(-this.canvas.height, 0),\n            radius: radius,\n            opacity: radius * 10,\n            speed: this.speedMultiplier * (radius / 6),\n            dx: (Math.random() - 0.5) * 2,\n        };\n    }\n\n    #drawSnowflake(flake: SnowFlake) {\n        this.context.beginPath();\n        this.context.arc(flake.xpos, flake.ypos, flake.radius, 0, Math.PI * 2);\n        this.context.fillStyle = `hsl(202.33deg 53.09% 84.12% / ${flake.opacity}%)`;\n        this.context.fill();\n    }\n\n    #updateSnowflake(flake: SnowFlake) {\n        flake.xpos += flake.dx;\n        flake.ypos += flake.speed;\n\n        if (flake.ypos - flake.radius > this.canvas.height) {\n            flake.ypos = getRandomInt(-this.canvas.height, 0);\n            flake.xpos = getRandomInt(0, this.canvas.width);\n        }\n    }\n\n    start() {\n        this.snowCounter = 100;\n        this.speedMultiplier = 1;\n\n        this.stop();\n        this.snowflakes = Array.from({ length: this.snowCounter }, () => this.#createSnowflake());\n        this.#animate();\n    }\n\n    #animate() {\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        this.snowflakes.forEach((flake) => {\n            this.#updateSnowflake(flake);\n            this.#drawSnowflake(flake);\n        });\n\n        this.animationFrameId = requestAnimationFrame(this.#animate.bind(this));\n    }\n\n    stop() {\n        if (this.animationFrameId) {\n            cancelAnimationFrame(this.animationFrameId);\n            this.animationFrameId = 0;\n        }\n\n        this.snowflakes = [];\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n\n    setCounter(newCount: number) {\n        this.snowCounter = newCount;\n        this.snowflakes = Array.from({ length: this.snowCounter }, () => this.#createSnowflake());\n    }\n\n    resize() {\n        this.canvas.width = window.innerWidth;\n        this.canvas.height = window.innerHeight;\n    }\n}\n\nexport function initSnow() {\n    const canvas = document.getElementById(\"snow-canvas\") as HTMLCanvasElement;\n    const snowfall = new Snowfall(canvas);\n\n    snowfall.start();\n\n    window.addEventListener(\n        \"resize\",\n        debounce(() => snowfall.resize(), 150),\n    );\n}\n"],"names":["parcelRequire","$parcel$global","globalThis","self","window","global","register","module","exports","$37dd629e9bb0ec99$var$getRandomInt","min","max","Math","floor","random","Object","defineProperty","get","$37dd629e9bb0ec99$export$91f81f316470c81f","set","s","enumerable","configurable","$37dd629e9bb0ec99$var$Snowfall","constructor","canvas","snowCounter","speedMultiplier","snowflakes","animationFrameId","context","getContext","Error","resize","radius","xpos","width","ypos","height","opacity","speed","dx","flake","beginPath","arc","PI","fillStyle","fill","start","stop","Array","from","length","clearRect","forEach","requestAnimationFrame","bind","cancelAnimationFrame","setCounter","newCount","innerWidth","innerHeight","snowfall","document","getElementById","addEventListener","$37dd629e9bb0ec99$var$debounce","func","wait","timeout","clearTimeout","setTimeout"],"version":3,"file":"snow.fdcfdfbc.js.map"}